package pe.com.backend.demo.config;

import org.springframework.boot.CommandLineRunner;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class SchemaInitializer implements CommandLineRunner {

  private final JdbcTemplate jdbc;

  public SchemaInitializer(JdbcTemplate jdbc) {
    this.jdbc = jdbc;
  }

  @Override
  public void run(String... args) {
    // ¿Existe la tabla?
    Integer exists = jdbc.queryForObject(
        "select count(*) from information_schema.tables " +
        "where table_schema = 'public' and table_name = 'color'", Integer.class);

    if (exists != null && exists == 0) {
      // Crear tabla
      jdbc.execute("""
          CREATE TABLE public.color(
            id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name  VARCHAR(50) NOT NULL,
            red   INT NOT NULL,
            green INT NOT NULL,
            blue  INT NOT NULL
          )
          """);

      // Insertar seed (solo porque ACABAMOS de crearla)
      jdbc.batchUpdate("""
          INSERT INTO public.color(id, name, red, green, blue) VALUES
            (1, 'GREEN', 0,   128, 0),
            (2, 'RED',   255, 0,   0),
            (3, 'BLUE',  0,   0,   255),
            (4, 'WHITE', 255, 255, 255),
            (5, 'YELLOW',255, 255, 0),
            (6, 'LIME',  0,   255, 0),
            (7, 'BLACK', 0,   0,   0),
            (8, 'GRAY',  128, 128, 128)
          """);

    // IMPORTANT: mover la secuencia al máximo id insertado
      jdbc.execute("""
          SELECT setval(
            pg_get_serial_sequence('public.color','id'),
            (SELECT COALESCE(MAX(id),0) FROM public.color)
          )
          """);
    }
  }
}
